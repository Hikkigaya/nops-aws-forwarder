AWSTemplateFormatVersion: 2010-09-09
Description: "cloudformation template to deploy nOps lambda forwarder"

Parameters: 
  pLambdaPackageS3BucketName:
    Type: String
    Description: S3 bucket name which contains lambda code package.
  pLambdaPackageFileName:
    Type: String
    Description: lambda code package file name.
  pnOpsApiKey:
    Type: String
    NoEcho: true
    Description: nOps api key.
  pCloudtrailBucketName:
    Type: String
    Description: S3 Bucket name which contains cloudtrail logs.
  pMemorySize:
    Type: Number
    Default: 1024
    MinValue: 128
    MaxValue: 3008
    Description: Memory size for the nOps Forwarder Lambda function
  pTimeout:
    Type: Number
    Default: 120
    Description: Timeout for the nOps Forwarder Lambda function

Resources:
  rnopsLambdaForwarderExecutionRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - PolicyName: "cloudwatchlogsaccess"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        - PolicyName: "cloudtrails3access"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - "s3:GetObject"
                  - "s3:GetBucketNotification"
                  - "s3:PutBucketNotification"
                Resource: 
                  - !Sub 'arn:aws:s3:::${pCloudtrailBucketName}/*'
                  - !Sub 'arn:aws:s3:::${pCloudtrailBucketName}'

  rLambdaForwarder:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref pLambdaPackageS3BucketName
        S3Key: !Ref pLambdaPackageFileName
      PackageType: Zip
      Handler: "lambda_function.lambda_handler"
      Role: !GetAtt rnopsLambdaForwarderExecutionRole.Arn
      Runtime: "python3.9"
      MemorySize:
          Ref: pMemorySize
      Timeout:
        Ref: pTimeout
      FunctionName: "nops-aws-forwarder"
      Environment:
        Variables:
          NOPS_API_KEY: !Ref pnOpsApiKey
          NOPS_LOG_LEVEL: 'INFO'
    DependsOn: 
      - rnopsLambdaForwarderExecutionRole

  rLambdaForwarderInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt rLambdaForwarder.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${pCloudtrailBucketName}'

  rSetupS3TriggerLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Runtime: "python3.9"
      Timeout: 60
      FunctionName: "nops-setup-s3-trigger"
      Handler: "index.lambda_handler"
      Role: !GetAtt rnopsLambdaForwarderExecutionRole.Arn
      Code:
        ZipFile: |
            from __future__ import print_function
            import json
            import boto3
            import cfnresponse
            
            SUCCESS = "SUCCESS"
            FAILED = "FAILED"
            
            print('Loading function')
            s3 = boto3.resource('s3')
            
            def lambda_handler(event, context):
                print("Received event: " + json.dumps(event, indent=2))
                responseData={}
                try:
                    if event['RequestType'] == 'Delete':
                        print("Request Type:",event['RequestType'])
                        Bucket=event['ResourceProperties']['Bucket']
                        delete_notification(Bucket)
                        print("Sending response to custom resource after Delete")
                    elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                        print("Request Type:",event['RequestType'])
                        LambdaArn=event['ResourceProperties']['LambdaArn']
                        Bucket=event['ResourceProperties']['Bucket']
                        add_notification(LambdaArn, Bucket)
                        responseData={'Bucket':Bucket}
                        print("Sending response to custom resource")
                    responseStatus = 'SUCCESS'
                except Exception as e:
                    print('Failed to process:', e)
                    responseStatus = 'FAILED'
                    responseData = {'Failure': 'Something bad happened.'}
                cfnresponse.send(event, context, responseStatus, responseData)

            def add_notification(LambdaArn, Bucket):
                bucket_notification = s3.BucketNotification(Bucket)
                response = bucket_notification.put(
                  NotificationConfiguration={
                    'LambdaFunctionConfigurations': [
                      {
                          'LambdaFunctionArn': LambdaArn,
                          'Events': [
                              's3:ObjectCreated:*'
                          ]
                      }
                    ]
                  }
                )
                print("Put request completed....")
              
            def delete_notification(Bucket):
                bucket_notification = s3.BucketNotification(Bucket)
                response = bucket_notification.put(
                    NotificationConfiguration={}
                )
                print("Delete request completed....")

  rSetupS3TriggerLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt rSetupS3TriggerLambda.Arn
      Principal: 'cloudformation.amazonaws.com'
      SourceAccount: !Ref "AWS::AccountId"
    DependsOn: rSetupS3TriggerLambda
  
  rTriggerSetupS3Trigger:
    Type: 'Custom::LambdaTrigger'
    Properties:
      ServiceToken: !GetAtt rSetupS3TriggerLambda.Arn
      LambdaArn: !GetAtt rLambdaForwarder.Arn
      Bucket: !Ref pCloudtrailBucketName
    DependsOn: 
      - rSetupS3TriggerLambdaInvokePermission
      - rLambdaForwarder
